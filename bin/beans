#!/usr/bin/env node
/*jshint -W097, -W033, node: true, esversion: 6 */
"use strict";

var argv = require("yargs").argv;
var colors = require("colors");
var _ = require("lodash");
var chokidar = require("chokidar");

var riot = require('@riotjs/compiler')

const fs = require("fs");
const path = require("path");
const { exec, execSync } = require("child_process");

var dirname = process.cwd();
const module_bin_folder = __dirname.replace(/\/bin$/, '/node_modules/.bin')

function findFilesInDir(startPath, filter) {
  var results = [];

  var files = fs.readdirSync(startPath);
  for (var i = 0; i < files.length; i++) {
    var filename = path.join(startPath, files[i]);
    var stat = fs.lstatSync(filename);
    if (stat.isDirectory()) {
      results = results.concat(findFilesInDir(filename, filter)); //recurse
    } else if (filename.indexOf(filter) >= 0) {
      results.push(filename);
    }
  }
  return results;
}

const run_specs = () => {
  exec("./luaonbeans.org -i beans.lua specs", (error, stdout, stderr) => {
    if (error) {
      console.log("Specs failed !".red);
      console.log(error.toString());
      console.log(stdout.toString());
      console.log(stderr.toString());
    } else {
      console.log(stdout.toString());
      console.log("Specs passed successfully!".green);
    }
  });
};

if (argv.w) {
  // Running specs
  if (argv.t) run_specs();

  // tailwindcss
  console.log("Searching for tailwind css files ...");

  let tw_files = findFilesInDir("app", "_tw_src");
  console.log(tw_files);

  _.each(tw_files, (file) => {
    var path = file.split("/");
    path.splice(-1);

    exec(
      module_bin_folder + "/tailwind -i " +
      file +
      " -o public/" +
      _.last(path) +
      ".css -w -m -c " +
      path.join("/") +
      "/tailwind.config.js"
    );
  });

  //console.log("Watching folder.", dirname);

  chokidar
    .watch(dirname, { ignored: /(^|[\/\\])\../ })
    .on("all", (event, path) => {
      if (event == "change") {
        //console.log("change : ", path.replace(dirname, ""));
        if (argv.t) run_specs();
        if (_.last(path.split(".")) == "riot") {
          var currentPath = process.cwd()

          fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
            try {
              const { code, map } = riot.compile(data, {
                // transform the `:host` css rules
                scopedCss: true,
                // expressions delimiters
                brackets: ['{', '}'],
                // keep HTML comments
                comments: false
              })

              fs.writeFileSync("./public/" + path.replace(currentPath, "") + ".js", code)
              console.log(_.last(path.split("/")).yellow + " compiled".green)
            } catch (err) {
              console.log(_.last(path.split("/")).yellow + " not compiled".red)
              console.log(err)
            }
          });
        }
      }
    });
} else {
  const args = process.argv.slice(2);

  if (args[0] == "new") {
    if (args[1] == undefined) {
      console.log("ERROR".red);
      console.log("syntax : beans new myproject".yellow);
    } else {
      process.stdout.write("üì¶ ");
      execSync(
        "git clone --depth=1 https://github.com/solisoft/luaonbeans.git " +
          args[1],
      );
      execSync("rm -Rf " + args[1] + "/.git");
      execSync(
        "cp " +
          args[1] +
          "/config/database.json.sample " +
          args[1] +
          "/config/database.json",
      );
      execSync("rm -Rf " + args[1] + "/docs");
      execSync("rm -Rf " + args[1] + "/.github");
      console.log("‚úÖ Project created !");
      execSync("cd " + args[1] + " && git init");
    }
  } else if (args[0] == "build") {
    execSync("cp luaonbeans.org build.org");
    execSync("zip build.org .init.lua");
    execSync("zip -r build.org .lua");
    execSync("zip -r build.org app");
    execSync("zip -r build.org public");
    execSync("zip -r build.org specs");
    execSync("zip -r build.org migrations");
    execSync("zip -r build.org config");
    console.log("üì¶ build.org built successfully!");
  } else if (args[0] == "update") {
    console.log("üê≥ Updating luaonbeans...");
    process.stdout.write("üì¶ ");
    execSync(
      "git clone --depth=1 https://github.com/solisoft/luaonbeans.git " +
        "_update",
    );
    console.log("üì¶ copying .lua/* files");
    execSync("cp -Rvf _update/.lua/* .lua");
    execSync("cp -Rvf _update/.templates/* .lua");
    execSync("rm -Rvf _update");
    console.log("‚úÖ Updated!");
  } else if (args[0] == "specs") {
    console.log("running specs");
    run_specs();
  } else {
    execSync("./luaonbeans.org -i beans.lua " + args.join(" "));
  }
}
