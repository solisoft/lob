#!/usr/bin/env node
/*jshint -W097, -W033, node: true, esversion: 6 */
"use strict"

var argv = require("yargs").argv
var colors = require("colors")
var _ = require("lodash")
var chokidar = require("chokidar")

const fs = require("fs")
const path = require("path")
const { exec, execSync } = require("child_process")

var dirname = process.cwd()

function findFilesInDir(startPath, filter) {
  var results = []

  var files = fs.readdirSync(startPath)
  for (var i = 0; i < files.length; i++) {
    var filename = path.join(startPath, files[i])
    var stat = fs.lstatSync(filename)
    if (stat.isDirectory()) {
      results = results.concat(findFilesInDir(filename, filter)) //recurse
    } else if (filename.indexOf(filter) >= 0) {
      results.push(filename)
    }
  }
  return results
}

const run_specs = () => {
  exec("./luaonbeans.org -i beans specs", (error, stdout, stderr) => {
    if (error) {
      console.log("Specs failed !".red)
      console.log(stdout)
    } else {
      console.log("Specs passed successfully!".green)
    }
  });
};

if (argv.w) {
  // Running specs
  run_specs()

  // tailwindcss
  console.log("Searching for tailwind css files ...")

  let tw_files = findFilesInDir("app", "_tw_src")
  console.log(tw_files)

  _.each(tw_files, (file) => {
    var path = file.split("/")
    path.splice(-1);
    exec(
      "tailwind -i " +
        file +
        " -o public/" +
        _.last(path) +
        ".css -w -m -c " +
        path.join("/") +
        "/tailwind.config.js"
    );
  });

  console.log("Watching folder.", dirname)

  chokidar
    .watch(dirname, { ignored: /(^|[\/\\])\../ })
    .on("all", (event, path) => {
      if (event == "change") {
        console.log("change : ", path)
        run_specs()
      }
    });
} else {
  const args = process.argv.slice(2);

  if (args[0] == "new") {
    if (args[1] == undefined) {
      console.log("ERROR".red);
      console.log("syntax : beans new myproject".yellow);
    } else {
      process.stdout.write("📦 ");
      execSync(
        "git clone --depth=1 https://github.com/solisoft/luaonbeans.git " +
        args[1]
      );
      execSync("rm -Rf " + args[1] + "/.git");
      execSync(
        "cp " +
        args[1] +
        "/config/database.json.sample " +
        args[1] +
        "/config/database.json"
      );
      console.log("✅ Project created !")
      execSync("cd " + args[1])
    }
  } else if (args[0] == "build") {
    execSync("cp luaonbeans.org build.org");
    execSync("zip build.org .init.lua");
    execSync("zip -r build.org .lua");
    execSync("zip -r build.org app");
    execSync("zip -r build.org public");
    execSync("zip -r build.org specs");
    execSync("zip -r build.org migrations");
    execSync("zip -r build.org config");
  } else if (args[0] == "update") {
    console.log("🐳 Updating luaonbeans...");
    process.stdout.write("📦 ");
    execSync(
      "git clone --depth=1 https://github.com/solisoft/luaonbeans.git " +
      "_update"
    );
    console.log("📦 copying .lua/* files");
    execSync("cp -Rvf _update/.lua/* .lua")
    execSync("cp -Rvf _update/.templates/* .lua")
    execSync("rm -Rvf _update")
    console.log("✅ Updated!");
  } else {
    execSync(
      "./luaonbeans.org -i beans " + args.join(" "),
      (error, stdout, stderr) => {}
    );
  }
}
